DebateController = ["$scope", ($scope) ->
  self = this;
  self.words = $scope.words;

  self.filterWord = (newWord) ->
    if newWord
      $scope.wordDetailDimentionCopy.filterExact(newWord);
      $scope.wordDimensionCopy.filterExact(newWord);
    else
      $scope.wordDetailDimentionCopy.filterExact("");
      $scope.wordDimensionCopy.filterAll();
    self.redrawOverview();
    self.redrawDetail();
    return

  # Reset functions
  self.resetBox = () ->
    $scope.chart.filterAll();
    self.redrawOverview();

  self.resetPie = () ->
    $scope.pie.filterAll();
    self.redrawOverview();

  self.resetBubble = () ->
    $scope.bubble.filterAll();
    self.redrawOverview();

  self.resetDetail = () ->
    $scope.wordDetailDimentionCopy.filterExact("");
    $scope.wordDimensionCopy.filterAll();
    self.redrawOverview();
    self.redrawDetail();

  self.resetAll = () ->
    $scope.chart.filterAll();
    $scope.pie.filterAll();
    $scope.bubble.filterAll();
    $scope.wordDetailDimentionCopy.filterExact("");
    $scope.wordDimensionCopy.filterAll();
    self.redrawOverview();
    self.redrawDetail();

  self.redrawOverview = () ->
    dc.redrawAll("overview");

  self.redrawDetail = () ->
    dc.redrawAll("detail");

  return
]

angular.module("debate-visualization")
  .directive("debateCharts", () ->
    return {
        restrict: 'E',
        templateUrl: "<%= asset_path 'debateCharts/layout/layout.html' %>",
        scope: {
          words: '=',
          posColor: '=',
          negColor: '='
        },
        controller: DebateController,
        controllerAs: "debateCtrl",

        link: (scope, element, attrs) ->
          row = $(element.children()[0])

          # Overview
          boxDom     = row.find(".box-plot")[0];
          boxRect    = boxDom.getBoundingClientRect();
          boxWidth   = boxRect.width;
          boxHeight  = boxWidth;

          pieDom    = row.find(".pie-chart")[0];
          pieRect   = pieDom.getBoundingClientRect();
          pieWidth  = pieRect.width;
          pieHeigt  = pieWidth;
          pieRadius = pieWidth/4;

          bubbleDom     = row.find(".bubble-chart")[0];
          bubbleRect    = bubbleDom.getBoundingClientRect();
          bubbleWidth   = bubbleRect.width;
          bubbleHeight  = bubbleWidth/2;

          # Detail
          detailBoxDom = row.find(".detail-box-plot")[0];
          detailBoxRect = detailBoxDom.getBoundingClientRect();
          detailBoxWidth = detailBoxRect.width;
          detailBoxHeight = detailBoxWidth;

          # Colors
          posColor = scope.posColor.toHexString();
          posColorLight = scope.posColor.clone().lighten(50).toHexString();
          negColor = scope.negColor.toHexString();
          negColorLight = scope.negColor.clone().lighten(50).toHexString();

          # Ordinal scale for charts
          color_scale_ord = d3.scale.ordinal()
            .domain(['positive', 'negative'])
            .range([posColor, negColor]);

          # Only render once data is populated
          scope.$watch('words', (newVal, oldVal) ->
            if newVal == undefined || newVal == null then return;
            # Charts
            scope.chart   = dc.boxPlot(boxDom, "overview");
            scope.pie     = dc.pieChart(pieDom, "overview");
            scope.bubble  = dc.bubbleChart(bubbleDom, "overview");
            scope.detailBox = dc.boxPlot(detailBoxDom, "detail");

            # Crossfilter for overview
            cf_overview = crossfilter(scope.words);
            # Crossfilter for details
            cf_detail = crossfilter(scope.words);

            # Dimensions
            sentimentDimension      = cf_overview.dimension( (d) -> return if d.average_sentiment > 0 then 'positive' else 'negative');
            sentimentDimensionCopy  = cf_overview.dimension( (d) -> return if d.average_sentiment > 0 then 'positive' else 'negative');
            wordDimension           = cf_overview.dimension( (d) -> return d.text);
            wordDimensionCopy       = cf_overview.dimension( (d) -> return d.text);

            wordDetailDimention     = cf_detail.dimension( (d) -> return d.text);
            wordDetailDimentionCopy = cf_detail.dimension( (d) -> return d.text).filterExact("");

            # Expose these to the controller for filtering
            scope.wordDetailDimentionCopy = wordDetailDimentionCopy;
            scope.wordDimensionCopy = wordDimensionCopy;

            # Groups
            sentimentCount = sentimentDimensionCopy.group().reduceCount();

            addSentiment = (p,v) ->
              p.push(v.average_sentiment);
              return p;
            removeSentiment = (p,v) ->
              p.splice(p.indexOf(v.average_sentiment), 1);
              return p;
            initSentiment = () ->
              return [];
            sentimentGroup = sentimentDimension.group().reduce(addSentiment, removeSentiment, initSentiment);

            addWord = (p,v) ->
              p.count += v.count;
              p.sentiment += v.average_sentiment;
              p.variance += v.sentiment_variance;
              return p;
            removeWord = (p,v) ->
              p.count -= v.count;
              p.sentiment -= v.average_sentiment;
              p.variance -= v.sentiment_variance;
              return p;
            initWord = () ->
              return {
                count: 0,
                sentiment: 0,
                variance: 0
              };
            wordGroup = wordDimension.group().reduce(addWord, removeWord, initWord);

            addWordDetail = (p,v) ->
              console.log "New word detail!"
              p = v.ratings
              return p;
            removeWordDetail = (p,v) ->
              p = []
              return p;
            initWordDetail = () ->
              return [];
            wordDetailGroup = wordDetailDimention.group().reduce(addWordDetail, removeWordDetail, initWordDetail)

            scope.chart.width(boxWidth)
              .height(boxHeight)
              .margins({top: 20, right: 30, bottom: 30, left: 35})
              .dimension(sentimentDimension)
              .group(sentimentGroup)
              .y(d3.scale.linear().domain([-1, 1]))
              .elasticX(true)
              .colors(color_scale_ord)
              .xAxisLabel("Overall Sentiment")
              .yAxisLabel("Sentiment Intensity")

            scope.detailBox.width(detailBoxWidth)
              .height(detailBoxHeight)
              .margins({top: 20, right: 30, bottom: 30, left: 35})
              .dimension(wordDetailDimention)
              .group(wordDetailGroup)
              .y(d3.scale.linear().domain([-1, 1]))
              .elasticX(true)
              .colors(color_scale_ord)
              .colorAccessor( (d) ->
                word = scope.words.filter((e) -> return d.key == e.text)[0];
                return if word.average_sentiment > 0 then 'positive' else 'negative';
              )
              .yAxisLabel("Sentiment Intensity")

            scope.pie.width(pieWidth)
              .height(pieHeigt)
              .radius(pieRadius)
              .dimension(sentimentDimensionCopy)
              .group(sentimentCount)
              .colors(color_scale_ord)
              .label((d) -> return d.key + " [#{d.value}]";)

            # Get min and max variance for y-axis scale
            max_var = d3.max(scope.words, (d) -> return d.sentiment_variance);

            scope.bubble.width(bubbleWidth)
              .height(bubbleHeight)
              .margins({top: 10, right: 30, bottom: 30, left: 35})
              .dimension(wordDimension)
              .group(wordGroup)
              .colors(color_scale_ord)
              .colorAccessor((d) -> return if d.value.sentiment > 0 then 'positive' else 'negative')
              .keyAccessor((d) -> return d.value.sentiment)
              .valueAccessor((d) -> return d.value.variance)
              .radiusValueAccessor((d) -> return d.value.count)
              .maxBubbleRelativeSize(0.05)
              .x(d3.scale.linear().domain([-1, 1]))
              .y(d3.scale.linear().domain([0, max_var]))
              .r(d3.scale.linear().domain([0,100]))
              .elasticY(true)
              .elasticX(true)
              .elasticRadius(true)
              .renderHorizontalGridLines(true)
              .renderVerticalGridLines(true)
              .yAxisPadding(0.1)
              .xAxisPadding(0.25)
              .xAxisLabel('Sentiment Value')
              .yAxisLabel('Sentiment Variance')
              .renderLabel(true)
              .label( (d) ->
                return d.key;
              )
              .renderTitle(true)
              .title( (d) ->
                  return [
                      d.key,
                      "Sentiment Score: #{d.value.sentiment}",
                      "Sentiment Variance: #{d.value.variance}",
                      "Frequency: #{d.value.count}"
                  ].join('\n');
              );

            dc.renderAll("overview");
            dc.renderAll("detail");

            scope.$emit("render-done", element);
          );
    };  # return
  );
